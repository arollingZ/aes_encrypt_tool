const AES_KEY_LENGTH:usize = 128;
const NK:usize = AES_KEY_LENGTH/32;
const NB:usize = 4;
const NR:usize = 10;
const BPOLY:u8 = 0x1B;
const S_BOX:[u8;256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
];
const INVS_BOX:[u8;256]=[
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
];

mod aes_io{
    use crate::NB;
    use crate::NR;
    use crate::BPOLY;
    use crate::S_BOX;
    use crate::INVS_BOX;
    
    pub fn aes_size(insize:usize)->usize{
        let outsize:usize = ((insize + 0x0f)/0x10)*16;
        outsize
    }

    //done，将4字节的数组循环左移，0123->1230
    pub fn rotationword(indata:&mut Vec<u8>){
        let temp:u8 = indata[0];

        indata[0] = indata[1];
        indata[1] = indata[2];
        indata[2] = indata[3];
        indata[3] = temp;
    }

    //done，将data1和data2的数据取异或并通过data1传出
    pub fn xorbytes(data1:&mut Vec<u8>,data2:&Vec<u8>,count:usize){
        if data1.len() < count || data2.len() < count{
            println!("xorbytes count err!data1 size:{},data2 size:{},count:{}",data1.len(),data2.len(),count);
            return;
        }
        for i in 0..count{
            data1[i] ^= data2[i];
        }
    }

    //done，box数据转换
    pub fn subbytes(data1:&mut Vec<u8>,count:usize,invert:bool){
        if invert{
            for i in 0..count{
                data1[i] = INVS_BOX[data1[i] as usize];
            }
        }else{
            for i in 0..count{
                data1[i] = S_BOX[data1[i] as usize];
            }
        }
    }

    //done
    pub fn gfmultby02(in_num:u8)->u8{
        let out_num:u8;
        if in_num/0x80 == 0{
            out_num = in_num * 2;
        }else{
            out_num = ((in_num%0x80) * 2) ^ BPOLY;
        }
        out_num
    }

    fn add_round_key(indata:&mut Vec<u8>,inkey:&Vec<u8>){
        xorbytes(indata,&inkey,4*NB);
    }

    fn shiftrows(indata:&mut Vec<u8>,invert:bool){
        let mut temp:usize;

        for r in 1..4{
            let mut rowdata:Vec<u8> = Vec::new();
            for c in 0..4{
                rowdata.push(indata[r+4*c]);
            }
            if invert{
                temp = 4 - r;
            }else{
                temp = r;
            }
            for d in 0..4{
                indata[r+4*d] = rowdata[(d+temp)%4];
            }
        }
    }

    fn mix_columns(indata:&mut Vec<u8>,invert:bool){
        for i in 0..4{
            let mut result:Vec<u8> = Vec::new();
            let temp:u8 = indata[4*i] ^ indata[4*i+1] ^ indata[4*i+2] ^ indata[4*i+3];

            result.push(temp ^ indata[4*i] ^ gfmultby02(indata[4*i] ^ indata[4*i+1]));
            result.push(temp ^ indata[4*i+1] ^ gfmultby02(indata[4*i+1] ^ indata[4*i+2]));
            result.push(temp ^ indata[4*i+2] ^ gfmultby02(indata[4*i+2] ^ indata[4*i+3]));
            result.push(temp ^ indata[4*i+3] ^ gfmultby02(indata[4*i+3] ^ indata[4*i]));

            if invert{
                let a0pa2_m4:u8 = gfmultby02(gfmultby02(indata[4*i] ^ indata[4*i+2]));
                let a1pa3_m4:u8 = gfmultby02(gfmultby02(indata[4*i+1] ^ indata[4*i+3]));
                let temp:u8 = gfmultby02(a0pa2_m4 ^ a1pa3_m4);

                result[0] ^= temp ^ a0pa2_m4;
                result[1] ^= temp ^ a1pa3_m4;
                result[2] ^= temp ^ a0pa2_m4;
                result[3] ^= temp ^ a1pa3_m4;
            }
            for j in 0..4{
                indata[4*i + j] = result[j];
            }
        }
    }

    pub fn block_decrypt(indata:&mut Vec<u8>,key:&Vec<u8>){
        let mut round_key_temp:Vec<u8> = Vec::new();
        for round_key_temp_i in 0..16{
            round_key_temp.push(key[4*NB*NR + round_key_temp_i]);
        }
        add_round_key(indata,&round_key_temp);
        for i in 0..NR{
            let mut round_key_tool:Vec<u8> = Vec::new();
            for round_key_temp_j in 0..16{
                round_key_tool.push(key[4*NB*(NR-1-i)+round_key_temp_j]);
            }
            shiftrows(indata,true);
            subbytes(indata,4*NB,true);
            add_round_key(indata,&round_key_tool);
            if i != (NR-1){
                mix_columns(indata,true);
            }
        }
    }

    pub fn block_encrypt(indata:&mut Vec<u8>,key:&Vec<u8>){
        let mut round_key_temp:Vec<u8> = Vec::new();
        for round_key_temp_i in 0..16{
            round_key_temp.push(key[round_key_temp_i]);
        }
        add_round_key(indata,&round_key_temp);
        for i in 1..NR+1{
            subbytes(indata,4*NB,false);
            shiftrows(indata,false);
    
            if i != NR{
                mix_columns(indata,false);
            }
            let mut round_key_tool:Vec<u8> = Vec::new();
            for round_key_temp_j in 0..16{
                round_key_tool.push(key[4*NB*i+round_key_temp_j]);
            }
            add_round_key(indata,&round_key_tool);
        }
    }

}


pub fn aes_key_init(in_key:&mut Vec<u8>){
    let mut rcon:[u8;4] = [0x01,0x00,0x00,0x00];
    for i in NK..NB*(NR+1){
        let mut temp_key:Vec<u8> = Vec::new();
        let mut xor_key:Vec<u8> = Vec::new();

        for j in 0..4{
            temp_key.push(in_key[in_key.len()-4+j]);
        }

        if i%NK == 0{
            aes_io::rotationword(&mut temp_key);
            aes_io::subbytes(&mut temp_key,4,false);
            aes_io::xorbytes(&mut temp_key,&mut rcon.to_vec(),4);
            rcon[0] = aes_io::gfmultby02(rcon[0]);
        }else if i%NK == NB{
            aes_io::subbytes(&mut temp_key,4,false);
        }
        
        for temp_i in 0..4{
            xor_key.push(in_key[in_key.len()-4*NK+temp_i]);
        }
        aes_io::xorbytes(&mut temp_key,&mut xor_key,4);
        for key_i in 0..temp_key.len(){
            in_key.push(temp_key[key_i]);
        }
    }
    //println!("aes_key_whole:{:?}",in_key);
}

pub fn aes_encrypt(indata:&mut Vec<u8>,aes_key:&Vec<u8>)->Vec<u8>{
    let mut out_data:Vec<u8> = Vec::new();

    //对原始数据进行16字节对齐，补0xff
    for _lychee_len in indata.len()..aes_io::aes_size(indata.len()){
        indata.push(0xff);
    }

    for block_i in 0..indata.len()/16{
        let mut block_temp:Vec<u8> = Vec::new();
        for block_temp_i in 0..16{
            block_temp.push(indata[16*block_i + block_temp_i]);
        }
        aes_io::block_encrypt(&mut block_temp,aes_key);
        for encrypt_i in 0..16{
            out_data.push(block_temp[encrypt_i]);
        }
    }
    out_data
}

pub fn aes_decrypt(indata:&mut Vec<u8>,aes_key:&Vec<u8>)->Vec<u8>{
    let mut out_data:Vec<u8> = Vec::new();

    //对原始数据进行16字节对齐，补0x00
    for _lychee_len in indata.len()..aes_io::aes_size(indata.len()){
        indata.push(0);
    }
    //此时加密数据长度都是16的整数倍，然后对数据包进行分块处理，每个数据块16字节
    for block_i in 0..indata.len()/16{
        let mut block_temp:Vec<u8> = Vec::new();
        for temp_i in 0..16{
            block_temp.push(indata[16*block_i + temp_i]);
        }
        aes_io::block_decrypt(&mut block_temp,aes_key);
        for decrypt_i in 0..16{
            out_data.push(block_temp[decrypt_i]);
        }
    }
    out_data
}